spring:
  profiles:
    active: local #default
    group:
      local:
        - common
      prod:
        - common


---
spring:
  config:
    activate:
      on-profile: common
    import: aws.properties
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 15MB

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            scope: # 필드의 기본값이 openid, profile, email. openId가 스코프에 있으면 Open Id Provider로 인식하기 때문에 제외
              - profile
              - email
          naver:
            client-id: ${NAVER_OAUTH_CLIENT_ID}
            client-secret: ${NAVER_OAUTH_CLIENT_SECRET}
            client-authentication-method: client_secret_post  #인가 코드로 액세스 토큰을 요청할 때 방법을 정의
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            scope:
              - name
              - account_email
              - profile_image
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize  #소셜 로그인 버튼을 눌렀을 때 이동할 URL. 해당 URL로 이동하면 소셜 로그인과 사용자 동의를 진행하고 인가코드를 발급하여 사용자 서비스 서버로 리다이렉트 한다.
            token-uri: https://nid.naver.com/oauth2.0/token   #사용자 서비스 서버가 Redirect URI로 전달받은 인가 코드로 액세스 토큰을 요청하는 URI이다.
            user-info-uri: https://openapi.naver.com/v1/nid/me # 서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI이다.
            user-name-attribute: response # Naver 응답 값 resultCode, message, response 중 response 지정
jwt:
  secret-key: ${JWT_SECRET_KEY_CODE}

mail:
  host: smtp.gmail.com
  port: 587
  username: byeoldam309.official@gmail.com
  password: ${EMAIL_APP_PASSWORD}
  properties:
    mail:
      smtp:
        auth: true
        starttls:
          enable: true
          required: true
        connection-timeout: 5000
        timeout: 5000
        write-timeout: 5000
  auth-code-expired-ms: 600000 #10분

cors:
  allowed-origins: 'http://localhost:3000,http://localhost:5173,http://i10b309.p.ssafy.io:5173'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

app:
  auth:
    tokenSecret: ${JWT_TOKEN_SECRET}
    tokenExpiry: 1800000 #30분
    refreshTokenExpiry: 604800000 #7일
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth/redirect

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/byeol_dam?allowPublicKeyRetrieval=true&useSSL=false
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      dialect: org.hibernate.dialect.MariaDB
      ddl-auto: create
    show-sql: true
    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
    generate-ddl: true
  data:
    redis:
      url: redis://localhost:6379
      repositories:
        enabled: false
    mongodb:
      uri: mongodb://localhost:27017/byeol_dam?authSource=admin
      username: ${SPRING_DATASOURCE_USERNAME}
      password: ${SPRING_DATASOURCE_PASSWORD}
      database: byeol_dam
      authentication-database: admin

---

spring:
  config:
    activate:
      on-profile: prod
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://byeoldam-database:3306/byeol_dam?allowPublicKeyRetrieval=true&useSSL=false
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      dialect: org.hibernate.dialect.MariaDB
      ddl-auto: update
    show-sql: true
    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  data:
    redis:
      url: redis://byeoldam-redis:6379
      repositories:
        enabled: false
server:
  port: 8081
